function mainFig = mainGUI(fileName)
%% Creates the main user interface
%  The main configuration parameters used by the code are read from the
%  file passed to it.
% The interface is split into tabs

%   Get user screen size. Used to create a GUI that fits the screen
%   independently from the resolution.
    SC = get(0, 'ScreenSize');
    MaxMonitorX = SC(3);
    MaxMonitorY = SC(4);
       
%   Set the figure window size values
    MainFigScale = .8;          % Change this value to adjust the figure size
    MaxWindowX = round(MaxMonitorX*MainFigScale);
    MaxWindowY = round(MaxMonitorY*MainFigScale);
    XBorder = (MaxWindowX)/20;
    YBorder = (MaxWindowY)/20; 
    buttonW = 0.05; %Width of standard buttons
    buttonH = 0.06; %Height of standard buttons
    btnSmW = 0.04; %Width of small button
    btnSmH = 0.042; %Height of small button
    smallW= 1.6*buttonW; % Width of small buttons for coordinates
    smallH= 0.8*buttonH; % Height of small buttons for coordinates
        
%   Set the color varables.  
    White = [1  1  1];            % White - Selected tab color     
    BGColor = .9*White;           % Light Grey - Background color
        
%   MAIN INTERFACE
%   Create a container figure
    mainFig = figure(...
        'Units', 'pixels',...
        'Toolbar', 'none',...
        'Position',[ 2*XBorder, 2*YBorder, MaxWindowX, MaxWindowY ],...
        'NumberTitle', 'off',...
        'Name', 'Main GUI',...
        'MenuBar', 'none',...
        'Resize', 'on',...
        'Visible', 'on',... 
        'DockControls', 'off',...
        'Color', White);
    set(mainFig,'deletefcn',{@GUI_close, mainFig});
    set(mainFig, 'units', 'normalized');
    setappdata(mainFig, 'BGColor', BGColor);
    set(mainFig, 'SizeChangedFcn', @GUI_resize);

%   Create application data for mainFig. This is used to store the list
%   of configuration parameters within the GUI.
    configData= ini2struct(fileName);%   Read the struct from ini file.
     
%   Read coordinates file. Used to save and retrieve X, Y, Z,
%   coordinates of the motors.
    setappdata(mainFig, 'coordFile', 'D:\myMATLAB\LaserDAQ\CFG\savedCoordinates.ini');
    coordFile= getappdata(mainFig, 'coordFile');
    if(exist(coordFile)==2)
        storedCoord = ini2struct(coordFile);
    else
        storedCoord.saved= struct('sx', '1', 'sy', '1', 'sz', '1', 'c', '1', 'f', '1');
    end
        
%   Initialize variables and flags used in the code
    cameraX = str2double(configData.camera.camerax);
    cameraY = str2double(configData.camera.cameray);
    setappdata(mainFig, 'isConfig',0); %CONFIG STATUS FLAG
    setappdata(mainFig, 'isHome',0); %MOTOR HOME STATUS FLAG
    setappdata(mainFig, 'isRunning', 0); %RUNNING STATUS FLAG
    setappdata(mainFig, 'confPar', configData); %VALUES OF CONF PAR
    setappdata(mainFig, 'storedCoord', storedCoord); %VALUES IMPORTANT COORDINATES
    setappdata(mainFig, 'isScanning', 0); %SCANNER ACTIVE FLAG
    setappdata(mainFig, 'isPaused', 0); %PAUSE ACTIVE FLAG
    setappdata(mainFig, 'isStopping', 0); %STOP ACTIVE FLAG
    setappdata(mainFig, 'isPump1On', 0); %PUMP1 ACTIVE FLAG
    setappdata(mainFig, 'isPump2On', 0); %PUMP2 ACTIVE FLAG
    setappdata(mainFig, 'isSearching', 0); %SEARCH FOR ROOT AUTOMATICALLY
    setappdata(mainFig, 'maxSearch', 0); %VALUE OF SEARCH
    setappdata(mainFig, 'usePreviousScan', 0); %CHECK IF A PREVIOUS SCAN EXIST FOR THE TRACKING
    setappdata(mainFig, 'bgrarea', 0);
        
%   Create activex controls for motors and label them
    motorLabArray = [{'X'}, {'Y'}, {'Z'}, {'C'}, {'Focus'}, {'Shutter'}]; 
    for i = 1:6
        actxHandle(i) = actxcontrol(...
            'MGMOTOR.MGMotorCtrl.1',...
            'Position', [(90*i)-70 MaxWindowY-80 80 40],...
            'Parent', mainFig); %#ok<*AGROW>
        set(actxHandle(i), 'DISPLAYMODE', 3);

        motorLabel(i)= uicontrol('Style','text',...
            'Units', 'pixels',...
            'Position',[(90*i)-70 MaxWindowY-30 80 15],...
            'backgroundcolor', 'white',...
            'String',motorLabArray(i));
        set(motorLabel(i), 'Units', 'normalized');
    end
    setappdata(mainFig, 'actxHnd', actxHandle);
    setappdata(mainFig, 'motorLabel', motorLabel);

%% Create the main buttons and indicators used in the GUI
%   ====SAVE COORDINATE==== button
    sCoordX= 0.37;
    sCoordY= 0.9400;
    uicontrol('Parent', mainFig, ... 
        'Units', 'normalized', ...
        'Position', [sCoordX sCoordY btnSmW 0.78*btnSmH], ...
        'String', '<HTML><FONT size="-2">SAVE<br>COORD', ...
        'Style', 'pushbutton',...
        'Enable', 'Inactive',... %% Not really needed for these buttons, but maintains consinstent behaviour
        'HorizontalAlignment', 'center',...
        'Tag', 'SAVE_COORD',...
        'ButtonDownFcn', {@GUI_clickOther}, ...%%%
        'FontSize', 10);
    
%   ====LOAD COORDINATE==== button
    uicontrol('Parent', mainFig, ... 
        'Units', 'normalized', ...
        'Position', [sCoordX sCoordY-0.035 btnSmW 0.78*btnSmH], ...
        'String', '<HTML><FONT size="-2">LOAD<br>COORD', ...
        'Style', 'pushbutton',...
        'Enable', 'Inactive',... %% Not really needed for these buttons, but maintains consinstent behaviour
        'HorizontalAlignment', 'center',...
        'Tag', 'LOAD_COORD',...
        'ButtonDownFcn', {@GUI_clickOther}, ...%%%
        'FontSize', 10);
    
%   Collision check indicator
    cc_startx= 0.225;
    CollisionInd = uicontrol(... %Indicator
        'parent', mainFig,...        
        'Style', 'edit',...
        'String', '--',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Position', [cc_startx 0.870 btnSmW btnSmH/2],...
        'Callback', '');
    setappdata(mainFig, 'CollisionInd', CollisionInd);

%   Collision check button
    CollisionBtn = uicontrol(... %Button
        'parent', mainFig,...        
        'Style', 'togglebutton',...
        'String', 'OFF',...
        'Value', 0,... % 0= disabled
        'Units', 'normalized',...
        'Position', [cc_startx+0.048 0.870 btnSmW/2 btnSmH/2],...
        'Callback', {@GUI_collisionToggle, mainFig, CollisionInd}); 
    setappdata(mainFig, 'CollisionBtn', CollisionBtn);
        
    uicontrol(...  %Label
        'Parent', mainFig,...
        'Style', 'text',...
        'String', 'Collision check',...
        'HorizontalAlignment', 'left',...
        'backgroundcolor', 'white',...
        'Units', 'normalized',...
        'Position', [cc_startx+0.069 0.8680 1.2*btnSmW btnSmH/2]);

%%   Create indicators
%   Temperature indicator for infra-red sensor
    tIndX= 0.48;
    TempIndIR = uicontrol(... %Indicator
        'parent', mainFig,...        
        'Style', 'edit',...
        'String', '--',...
        'Units', 'normalized',...
        'Enable', 'inactive',...
        'Position', [tIndX 0.962 btnSmW btnSmH/2],...
        'Callback', '');
    setappdata(mainFig, 'TempIndIR', TempIndIR);
        
%   Temperature IR Label
    uicontrol(...  %Label
        'Parent', mainFig,...
        'Style', 'text',...
        'String', 'TEMP. IR (C)',...
        'Enable', 'on',...
        'HorizontalAlignment', 'left',...
        'backgroundcolor', 'white',...
        'Units', 'normalized',...
        'Position', [tIndX-0.042 0.96 1.0*btnSmW btnSmH/2]);
        
%   Temperature indicator for NTC sensors
    temperatureStr= {'INT. (C)' 'INTAKE (C)' 'EXT. (C)'};
    nSensors=3;
    for i=1:nSensors
    TempIndNTC(i) = uicontrol(... %Indicator
        'parent', mainFig,...        
        'Style', 'edit',...
        'String', '--',...
        'Units', 'normalized',...
        'Enable', 'inactive',...
        'Position', [tIndX (0.94-(i-1)*0.022) btnSmW btnSmH/2],...
        'Callback', '');
        
%   Temperature NTC label
    uicontrol(...  %Label
        'Parent', mainFig,...
        'Style', 'text',...
        'String', temperatureStr(i),...
        'Enable', 'on',...
        'HorizontalAlignment', 'left',...
        'backgroundcolor', 'white',...
        'Units', 'normalized',...
        'Position', [tIndX-0.042 (0.938-(i-1)*0.022) 1.*btnSmW btnSmH/2]);
    end
    setappdata(mainFig, 'TempIndNTC', TempIndNTC);
        
%   Peltier cell status indicator
    PeltierInd= uicontrol(...
        'parent', mainFig,...
        'HorizontalAlignment', 'center',...
        'String','<html>PELTIER<br>OFF',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Position', [0.55 0.94 btnSmW btnSmH], ...
        'Callback','');
    setappdata(mainFig, 'PeltierInd', PeltierInd);
        
%   Preview status indicator
    PreviewInd= uicontrol(...
        'parent', mainFig,...
        'HorizontalAlignment', 'center',...
        'String','<html>PREV<br>OFF',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Position', [0.6 0.94 btnSmW btnSmH], ...
        'Callback','');
    setappdata(mainFig, 'PreviewInd', PreviewInd);
      
%   LED cluster status indicator
    LedInd= uicontrol(...
        'parent', mainFig,...
        'HorizontalAlignment', 'center',...
        'String','<html>LED<br>OFF',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Position', [0.65 0.94 btnSmW btnSmH], ...
        'Callback','');
    setappdata(mainFig, 'LedInd', LedInd);
     
%   Laser shutter indicator
    ShutterInd= uicontrol(...
        'parent', mainFig,...
        'HorizontalAlignment', 'center',...
        'String','<html>SHUTTER<br>CLOSED',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Position', [0.7 0.94 btnSmW btnSmH], ...
        'Callback','');
    setappdata(mainFig, 'ShutterInd', ShutterInd);
     
%   Scan in progress indicator
    ScanInd= uicontrol(...
        'parent', mainFig,...
        'HorizontalAlignment', 'center',...
        'String','<html>SCAN<br>OFF',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Position', [0.75 0.94 btnSmW btnSmH], ...
        'Callback','');
    setappdata(mainFig, 'ScanInd', ScanInd);
     
%   Webcam status indicator
    WebInd= uicontrol(...
        'parent', mainFig,...
        'HorizontalAlignment', 'center',...
        'String','<html>WEBCAM<br>OFF',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Position', [0.8 0.94 btnSmW btnSmH], ...
        'Callback','');
    setappdata(mainFig, 'WebInd', WebInd);
     
%   Autofocus in progress indicator
    AFInd= uicontrol(...
        'parent', mainFig,...
        'HorizontalAlignment', 'center',...
        'String','<html>AF<br>OFF',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Position', [0.85 0.94 btnSmW btnSmH], ...
        'Callback','');
    setappdata(mainFig, 'AFInd', AFInd);
     
%   Pump 1 status indicator
    Pump1Ind= uicontrol(...
        'parent', mainFig,...
        'HorizontalAlignment', 'center',...
        'String','<html>PUMP1<br>OFF',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Position', [0.90 0.94 btnSmW btnSmH], ...
        'Callback','');
    setappdata(mainFig, 'Pump1Ind', Pump1Ind);
     
%   Pump 2 status indicator
    Pump2Ind= uicontrol(...
        'parent', mainFig,...
        'HorizontalAlignment', 'center',...
        'String','<html>PUMP2<br>OFF',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Visible', 'off', ...
        'Position', [0.95 0.94 btnSmW btnSmH], ...
        'Callback','');
    setappdata(mainFig, 'Pump2Ind', Pump2Ind);
        
       
%%  Create tab container
%   Prevent an annoying warning msg
    warning off MATLAB:uitabgroup:OldVersion
    mainTabGroup = uitabgroup(...
        'Parent', mainFig,...
        'Units', 'normalized',...
        'Position', [0.01 0.01 0.48 0.85],...
        'TabLocation','top');
           
%%  Create individual tabs within the container
        tab_1 = uitab('parent', mainTabGroup ,'title','SCAN');
        tab_2 = uitab('parent', mainTabGroup ,'title','MANUAL');
        tab_3 = uitab('parent', mainTabGroup ,'title','WEBCAM');
        tab_4 = uitab('parent', mainTabGroup ,'title','PLOTS');
        tab_5 = uitab('parent', mainTabGroup ,'title','MACROS');


%%  Close button (visible from all tabs)
%   When clicked, the button activates a callback function to close the GUI
%   in a clean way.
    closeBtn= uicontrol(...
        'parent', mainFig,...
        'String','CLOSE',...
        'Units', 'normalized',...
        'Position', [0.94 0.01 1.1*buttonW 1.1*buttonH], ...
        'FontSize', 10, ...
        'Callback', {@closeBtn_call});
        
    setappdata(mainFig, 'closeBtn', closeBtn);
                        
%   Preview area in main figure
    blankimage = zeros(cameraX/2, cameraY/2, 3, 'uint8');
    prevHaxes = axes(...
        'Parent', mainFig, ...
        'Box', 'off', ...
        'Units', 'pixels',...
        'Position', [810 100 cameraY/2 cameraX/1.5]);
    set(prevHaxes, 'Units', 'Normalized'); % Allow the area to stretch if the GUI is resized
        
    setappdata(mainFig, 'prevHaxes', prevHaxes);
    previewImage= imagesc(blankimage,'Parent', prevHaxes);
    setappdata(mainFig, 'previewImage', previewImage);

%   The camera is mounted rotated. We can manipulate the preview stream to
%   visualize it correctly. Also possible to superimpose data using
%   GUI_editPreview.
    setappdata(previewImage,'UpdatePreviewWindowFcn',@GUI_editPreview); 
    setappdata(previewImage,'HandleToMainFig',mainFig);
        
%   Create an plot area for the preview intensity distribution
    histoHaxes = axes('Parent', mainFig, ...
        'Units', 'normalized', ...
        'Position', [0.6265 0.025 0.30 0.06]);
    setappdata(gcf, 'histoHaxes', histoHaxes);
        
%	Checkbox to enable preview normalization
    prevNormCheck = uicontrol('Parent', mainFig, ...
        'Style','checkbox',...
        'String','Normalize Preview',...
        'Value',1,...
        'BackGroundColor', 'white',...
        'Units', 'normalized', ...
        'Position',[0.53 0.06 0.07 0.03]);
    setappdata(gcf, 'prevNormCheck', prevNormCheck);
        
%   Value of preview normalization parameter
    uicontrol('Style','text',...
        'Units', 'normalized',...
        'Parent', mainFig,...
        'Position',[0.562 0.02 0.05 buttonH/2],...
        'BackGroundColor', 'white',...
        'HorizontalAlignment', 'left',...
        'String','Value');
            
    prevVal = uicontrol('Parent', mainFig, ...
            'Style','edit',...
            'String','255',...
            'Units', 'normalized',...
            'Callback', {@onEditPreview_call},...
            'Position',[0.53 0.03 0.03 buttonH/2]);
    setappdata(gcf, 'prevVal', prevVal);

%%  Populate the tabs with their buttons and indicators    
%%   TAB 1 "AUTO" controls
%   CONFIG button
    configBtn= uicontrol(...
        'parent', tab_1,...
        'String','CONFIG',...
        'Units', 'normalized',...
        'Position', [0.025 0.775 2*buttonW buttonH], ...
        'FontSize', 10, ...
        'Callback',{@config_call, mainFig, fileName}); %HERE
    setappdata(mainFig, 'configBtn', configBtn);
        
%   START button
    startBtn= uicontrol(...
        'parent', tab_1,...
        'String','START',...
        'Units', 'normalized',...
        'Position', [0.135 0.775 2*buttonW buttonH], ...
        'FontSize', 10, ...
        'Callback',{@GUI_start_call, mainFig});
    setappdata(mainFig, 'startBtn', startBtn);

%   PAUSE button
    pauseBtn= uicontrol(...
        'parent', tab_1,...
        'String','PAUSE',...
        'Units', 'normalized',...
        'Position', [0.245 0.775 2*buttonW buttonH], ...
        'FontSize', 10, ...
        'Callback',{@GUI_pause_call, mainFig});
    setappdata(mainFig, 'pauseBtn', pauseBtn);

%   STOP button
    stopBtn= uicontrol(...
        'parent', tab_1,...
        'String','STOP',...
        'Units', 'normalized',...
        'Enable', 'off',...
        'Position', [0.355 0.775 2*buttonW buttonH], ...
        'FontSize', 10, ...
        'Callback',{@GUI_stop_call, mainFig});
    setappdata(mainFig, 'stopBtn', stopBtn);
        
%   ADJUST button (allows to reset the position after manual adjustment)
    uicontrol('Parent', tab_1, ...
        'Units', 'normalized', ...
        'Position', [0.245+buttonW-smallW/2 0.795+buttonH smallW smallH], ...
        'String', '<HTML><FONT size="-2">UPDATE<br>TRACKING', ...
        'Style', 'pushbutton',...
        'Enable', 'on',... 
        'HorizontalAlignment', 'center',...
        'Tag', 'ADJUST',...
        'Callback', {@GUI_clickOther}, ...%%%
        'FontSize', 10, ...
        'TooltipString', sprintf('Click to tell the code that\nthe cuvette has been manually adjusted') );

%   Indicators for time elapsed
    totalTimeInd= uicontrol('style','text',...
            'Units', 'normalized',...
            'Parent', tab_1,...
            'position',[0.025 0.575-buttonH/2 2*buttonW buttonH/2],...
            'string', '00:00:00:00' ,...
            'backgroundcolor', BGColor,...
            'foregroundcolor','default');
    setappdata(mainFig, 'totalTimeInd', totalTimeInd);
            
    totalTimeLbl= uicontrol('Style','text',...
            'Units', 'normalized',...
            'Parent', tab_1,...
            'Position',[0.025 0.575 2*buttonW buttonH/2],...
            'backgroundcolor', BGColor,...
            'String','TOTAL TIME');
    setappdata(mainFig, 'totalTimeLbl', totalTimeLbl);
            
    sinceScanTimeInd= uicontrol('style','text',...
            'Units', 'normalized',...
            'Parent', tab_1,...
            'position',[0.135 0.575-buttonH/2 2*buttonW buttonH/2],...
            'string', '00:00' ,...
            'backgroundcolor', BGColor,...
            'foregroundcolor','default');
    setappdata(mainFig, 'sinceScanTimeInd', sinceScanTimeInd);
            
    sinceScanTimeLbl= uicontrol('Style','text',...
            'Units', 'normalized',...
            'Parent', tab_1,...
            'Position',[0.135 0.575 2*buttonW buttonH/2],...
            'backgroundcolor', BGColor,...
            'String','SINCE SCAN');
    setappdata(mainFig, 'sinceScanTimeLbl', sinceScanTimeLbl);   
        
    lastScanTimeInd= uicontrol('style','text',...
            'Units', 'normalized',...
            'Parent', tab_1,...
            'position',[0.245 0.575-buttonH/2 2*buttonW buttonH/2],...
            'string', '00:00' ,...
            'backgroundcolor', BGColor,...
            'foregroundcolor','default');
    setappdata(mainFig, 'lastScanTimeInd', lastScanTimeInd);

    lastScanTimeLbl= uicontrol('Style','text',...
            'Units', 'normalized',...
            'Parent', tab_1,...
            'Position',[0.245 0.575 2*buttonW buttonH/2],...
            'backgroundcolor', BGColor,...
            'String','LAST SCAN');
    setappdata(mainFig, 'lastScanTimeLbl', lastScanTimeLbl);  

    inScanTimeInd= uicontrol('style','text',...
            'Units', 'normalized',...
            'Parent', tab_1,...
            'position',[0.355 0.575-buttonH/2 2*buttonW buttonH/2],...
            'string', '00:00' ,...
            'backgroundcolor', BGColor,...
            'foregroundcolor','default');
    setappdata(mainFig, 'inScanTimeInd', inScanTimeInd);

    inScanTimeLbl= uicontrol('Style','text',...
            'Units', 'normalized',...
            'Parent', tab_1,...
            'Position',[0.355 0.575 2*buttonW buttonH/2],...
            'backgroundcolor', BGColor,...
            'String','IN SCAN');
    setappdata(mainFig, 'inScanTimeLbl', inScanTimeLbl);  
 
%%   TAB 2 "MANUAL" controls
            TAB2_GUI(tab_2);

%%   TAB 3 "WEBCAM" controls
            %TAB3_GUI(tab_3);   %Disabled as per GS request 19/05/2017
            
%%   TAB 4 "PLOTS"
            TAB4_GUI(tab_4);
            
%%   TAB 5 "SLICES"
            TAB5_GUI(tab_5);
                      
end


function [] = config_call(~,~, mainFigHandle, fileName)
%%  Function that calls the config GUI
%   This creates a window with several user-configurable parameters that
%   can be adjusted while the GUI is running (for instance the number of
%   slices)

% Pass the mainFig handle to the subGUI
    configGUI = GUI_make_subgui(mainFigHandle, fileName); 
% If user closes mainFig, close new one as well.
    setappdata(mainFigHandle, 'cfgGUIhandle', configGUI);
end

%% On closing
function [] = fig_delet(varargin)
    %% Executes when user closes gui_passdata.
        try
            delete(varargin{3})
            GUI_close(varargin{4});
        catch
            % Do nothing.
        end
        
end

function closeBtn_call(source, ~)
%% Close button call
%   Executed upon clicking the "close" button. Ensures a clean stop of all
%   the hardware and software.
    mainFig= GUI_getParentFigure(source);
    
    % If the collision button is on, switch it off    
    CollisionBtn= getappdata(mainFig, 'CollisionBtn');
    collValue= get(CollisionBtn,'Value');
    if collValue
        callbackCell = get(CollisionBtn,'Callback');
        set(CollisionBtn,'Value', 0);
        callbackCell{1}(CollisionBtn,[],callbackCell{2:end});
        disp('Collision check is now off');
        pause(0.1);
    end
    
    % Check if scan is ongoing
    isScanning = getappdata(mainFig, 'isScanning');
    if (isScanning == 1)
        choiceClose = questdlg('The scan is running. Close anyway?', ...
                'Close?', ... %TITLE
                'Cancel', 'Force close now', 'Cancel'); %OPTION 1, OPTION 2, default
        switch choiceClose
            case 'Cancel'
                disp('CONTINUE SCANNING');
            case 'Force close now'
                disp('Application terminated by user');
                delete(gcbf);
        otherwise
            disp('CONTINUE SCANNING');
        end
    else
        delete(gcbf);
    end
end

function onEditPreview_call(source, ~)
%%  Check that input number are of numeric type.
%   When the user types a value in the config fields, make sure they are
%   actually numbers.
    input = str2double(get(source,'string'));
    if isnan(input)
      input= '255';
      set(source, 'String', input);
      return
    else
      if (input < 0)
          input = '0';
      end
      if (input > 255)
          input = '255';
      end
      display(input);
    end
    set(source, 'String', input);
end
